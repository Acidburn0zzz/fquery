#!/usr/bin/env node
/*jshint node: true */
'use strict';

var path = require('path'),
	_ = require('underscore'),
	chalk = require('chalk'),

	MakeJs = require('../lib/makejs/MakeJs'),

	pkg = require('../package.json'),
	cli = require('commander')
			.version(pkg.version)
			.option('-f, --file [makefile]', 'specify makefile [makefile.js]', 'makefile.js')
			.option('-t, --show-targets', 'show targets')
			.option('-T, --list-targets', 'list targets')
			.option('-D, --list-defaults', 'list default targets')
			.option('--no-color', 'disable colored output')
			.parse(process.argv),

	file = path.resolve(cli.file),

	makejs;


if (!cli.color) {
	chalk.enabled = false;
}


try {
	makejs = new MakeJs(file);
} catch (err) {
	process.stdout.write(err.toString());
	process.exit(1);
}


if (cli.showTargets) {

	var s = '';
	s += chalk.cyan('file: ' + file + '\n');
	s += chalk.cyan('defaults: ' + makejs._defaults.join(', ') + '\n');

	_.each(makejs._targets, function (target) {
		s += '\n';
		s += chalk.cyan.bold(target.name);
		if (target.deps.length) {
			s += chalk.cyan('  ->  [' + target.deps.join(', ') + ']');
		}
		s += '\n';
		if (target.desc) {
			s += chalk.grey(target.desc + '\n');
		}
	});

	process.stdout.write(s + '\n');
	return;
}

if (cli.listTargets) {

	process.stdout.write(_.pluck(makejs._targets, 'name').join('\n') + '\n');
	return;
}

if (cli.listDefaults) {

	process.stdout.write(makejs._defaults.join('\n') + '\n');
	return;
}


try {
	makejs.process(cli.args);
} catch (err) {
	process.stdout.write(err.toString());
	process.exit(2);
}
